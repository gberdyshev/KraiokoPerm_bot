import asyncio
import requests
import lxml
import sqlite3
import hashlib
import json
import time

from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters.command import Command, CommandObject

__db_path__ = './db/users.db'
__cooldown__ = 60
superusers = ['847454186']
#logging.basicConfig(level=logging.INFO)

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ JSON"""
    json_config_file = './db/config.json'
    with open(json_config_file, 'r') as file:
        return json.load(file)

jsonconfig = load_config()

bot = Bot(token=jsonconfig['TOKEN'])
dp = Dispatcher()
cooldown_data = dict()
cooldown_subscribe = dict()


def kraioko_check(passp):
    try:
        s = requests.get('https://kraioko.perm.ru/presults/', timeout=7).text
        index_1 = s.find('rhash')
        rhash = s[index_1+7:index_1+7+44]

        params = {'ds': passp[:4], 'dn':passp[4:], 'rhash': rhash}
        r = requests.get('https://kraioko.perm.ru/utils/results/loadstudentresults.php', params=params, timeout=7)
        if r.status_code != 200:
            return 400
        result = r.content
    
        soup = BeautifulSoup(result, 'lxml')
        data = []
        table = soup.find('table')
        if table is None:
            return False
        rows = table.find_all('tr')

        for row in range(1, len(rows)):
            new_row = []
            for td in rows[row].find_all('td'):
                new_row.append(td.text.strip())
            if len(new_row) > 1:
                data.append(new_row)
        return data
    except:
        return 400

def unpack_results(data) -> str:
    text = ''
    for row in data:
        subj, mark, status, date = row
        text = text + "\n" + f"üìó <b>{subj}</b>: {mark} ({status}) {date}"
    return text

def get_hash_user_id(id):
    w = str(id).encode(encoding='UTF-8')  
    hash_id = hashlib.sha256(w).hexdigest()
    return hash_id

def get_passp_from_user_id(id):
    hash_id = get_hash_user_id(id)
    conn = sqlite3.connect(__db_path__)
    cur = conn.cursor()
    cur.execute('select passport from users where tlg_id = ?', (hash_id, ))
    res = cur.fetchone()
    if res is None: return 0
    return res[0] # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

async def check_results():
    notify_users = []
    conn = sqlite3.connect(__db_path__)
    cur = conn.cursor()
    cur.execute('select * from notify')
    res = cur.fetchall()
    for row in res:
        user_id, state, last_len, message_id = row
        passp = get_passp_from_user_id(user_id)
        if passp != 0:
            data = kraioko_check(passp)
            if data != False and data != 400:
                if len(data) != last_len:
                    cur.execute('update notify set last_len = ? where user = ?', (len(data), user_id))
                    conn.commit()
                    text_res = unpack_results(data)
                    await bot.send_message(chat_id=message_id, text="‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö!"+ text_res, parse_mode=ParseMode.HTML)
                    
    
                    

async def periodic(interval):
    while True:
        await check_results()
        await asyncio.sleep(interval)
        print("–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω")
        


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    helps = """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!
–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å Kraioko.
–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –∏ —Å–µ—Ä–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /passport XXXXXXXXXX
–ó–∞—Ç–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ /check"""
    buttons = [[types.KeyboardButton(text='/check')]]
    kb = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer(helps, reply_markup=kb)


@dp.message(Command('passport'))
async def passport(message: types.Message, command: CommandObject):
    if command.args is None:
        return await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏ —Å–µ—Ä–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π! –ù–∞–ø—Ä–∏–º–µ—Ä: /passport 5700123456")
    if len(command.args) != 10:
        return await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")

    res = get_passp_from_user_id(message.from_user.id)
    hash_id = get_hash_user_id(message.from_user.id)
    conn = sqlite3.connect(__db_path__)
    cur = conn.cursor()
    if res == 0:
        cur.execute('insert into users VALUES (?,?)', (hash_id, command.args))
    else:
        cur.execute('update users set passport = ? where tlg_id = ?', (command.args, hash_id))
    conn.commit()
    conn.close()
    await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")

@dp.message(Command('my_passport'))
async def my_passport(message: types.Message):
    w = str(message.from_user.id).encode(encoding='UTF-8')  
    hash_id = hashlib.sha256(w).hexdigest()
    conn = sqlite3.connect(__db_path__)
    cur = conn.cursor()
    cur.execute('select passport from users where tlg_id = ?', (hash_id, ))
    res = cur.fetchone()
    if res is None:
        return await message.answer("–í—ã –µ—â–µ –Ω–µ –≤–≤–µ–ª–∏ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
    cur.execute('select state from notify where user = ?', (str(message.from_user.id), ))
    res2 = cur.fetchone()
    if res2 is None: status = False
    else: status = True
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}\n–ü–∞—Å–ø–æ—Ä—Ç: {res[0]}\n–ü–æ–¥–ø–∏—Å–∫–∞: {status}")

@dp.message(Command('subscribe'))
async def subscribe(message: types.Message):
    if str(message.from_user.id) in cooldown_subscribe:
        delay = int(time.time()) - cooldown_subscribe[str(message.from_user.id)]
        if delay < __cooldown__:
            return await message.answer(f"–°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ {__cooldown__-delay} —Å.")
    conn = sqlite3.connect(__db_path__)
    cur = conn.cursor()
    user_id = message.from_user.id
    cur.execute('select state from notify where user = ?', (user_id, ))
    res = cur.fetchone()
    if res is None or res[0] == 0:
        
        doc = get_passp_from_user_id(user_id)
        if doc == 0: return await message.answer("–í—ã –µ—â–µ –Ω–µ –≤–≤–µ–ª–∏ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        data = kraioko_check(doc)
        if data == 400 or data == False: return message.answer("–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")

        cur.execute('insert into notify VALUES (?,?,?,?)', (user_id, 1, len(data), str(message.chat.id)))
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
    else:
        cur.execute('delete from notify where user = ?', (user_id, ))
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")

    cooldown_subscribe[str(message.from_user.id)] = int(time.time())
    conn.commit()
    





@dp.message(Command('check'))
async def check(message: types.Message):
    if str(message.from_user.id) in cooldown_data:
        delay = int(time.time()) - cooldown_data[str(message.from_user.id)]
        if delay < __cooldown__:
            return await message.answer(f"–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ {__cooldown__-delay} —Å.")
    button_check = types.KeyboardButton(text='/check')
    kb = types.ReplyKeyboardMarkup(keyboard=[[button_check]], resize_keyboard=True)
    w = str(message.from_user.id).encode(encoding='UTF-8')  
    hash_id = hashlib.sha256(w).hexdigest()
    
    conn = sqlite3.connect(__db_path__)
    cur = conn.cursor()
    cur.execute('select passport from users where tlg_id = ?', (hash_id, ))
    res = cur.fetchone()
    if res is None:
        await message.answer("–î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π /passport")
    text = f"üìñ¬∑<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</b>¬∑\n"
    data = kraioko_check(res[0])
    if data is False:
        return await message.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    if data == 400:
        return await message.answer("Kraioko –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.")
    text = text + unpack_results(data)

    cooldown_data[str(message.from_user.id)] = int(time.time()) 
    await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=kb)

@dp.message(Command('monitor'))
async def monitor(message: types.Message):
    if not (str(message.from_user.id) in superusers):
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã!")
    conn = sqlite3.connect(__db_path__)
    cur = conn.cursor()
    cur.execute('select * from users')
    users = cur.fetchall()
    cur.execute('select * from notify')
    notifiers = cur.fetchall()
    resp = requests.get('https://kraioko.perm.ru', timeout=7)
    totaltime = resp.elapsed.total_seconds()*1000
    await message.answer(f"Kraioko –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ {totaltime} –º—Å\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n–° —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏: {len(notifiers)}\n")
    




async def main():
    task = asyncio.create_task(periodic(600))
    await dp.start_polling(bot)

def create_tables():
    conn = sqlite3.connect(__db_path__)
    cur = conn.cursor()
    cur.execute('CREATE TABLE if not exists users (tlg_id TEXT, passport TEXT)')
    cur.execute('CREATE TABLE if not exists notify (user TEXT, state INTEGER, last_len INTEGER, message_id TEXT, PRIMARY KEY(user))')
    conn.commit()

if __name__ == "__main__":
    create_tables()
    asyncio.run(main())
